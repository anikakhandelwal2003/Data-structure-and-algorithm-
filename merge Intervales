// question
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return
an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:- 
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].



Answer:-

 vector<vector<int>> merge(vector<vector<int>>& intervals) {

        sort(intervals.begin(), intervals.end());

        vector<vector<int>> ans;
        vector<int> prev = intervals[0];

        for (int i = 1; i < intervals.size(); ++i) {
            vector<int> interval = intervals[i];
            if (interval[0] <= prev[1]) {
                prev[1] = max(prev[1], interval[1]);
            } else {
                ans.push_back(prev);
                prev = interval;
            }
        }

        ans.push_back(prev);
        return ans;        
    }
